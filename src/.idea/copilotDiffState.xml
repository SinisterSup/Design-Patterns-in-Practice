<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/factory/ReadMe.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/ReadMe.md" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Factory Design Pattern Demo: Cross-Platform UI Components&#10;&#10;This project demonstrates the **Factory Design Pattern** through a practical example of building cross-platform UI components. It's designed as an educational resource to understand how factory patterns solve real-world software engineering challenges.&#10;&#10;&gt; **Note:** This is demo code for learning purposes only. The implementations simulate UI component creation without actual rendering logic.&#10;&#10;##  Project Overview&#10;&#10;Imagine you're building an application that needs to run on multiple platforms (Android, iOS, Windows). Each platform has its own UI styling and behavior, but the core functionality remains the same. How do you manage this complexity while keeping your code clean and maintainable?&#10;&#10;The **Factory Design Pattern** provides an elegant solution by abstracting the object creation process, allowing you to create families of related objects without specifying their concrete classes.&#10;&#10;## ️ Architecture &amp; Implementation&#10;&#10;### Core Components&#10;&#10;#### 1. UI Component Interfaces&#10;Located in `factory/components/`, each component defines a contract:&#10;&#10;- **Button**: Click events, labels, styling&#10;- **Textfield**: Text input, focus/blur events, placeholders&#10;- **Checkbox**: Check/uncheck states, change events&#10;- **Dropdown**: Selection events, options management&#10;- **Menu**: Item selection, menu item management&#10;&#10;#### 2. Platform-Specific Implementations&#10;Each interface has three concrete implementations:&#10;- `AndroidButton`, `IOSButton`, `WindowsButton`&#10;- `AndroidTextfield`, `IOSTextfield`, `WindowsTextfield`&#10;- And so on for all components...&#10;&#10;#### 3. Abstract Factory Implementation&#10;The `factory/abstractfactory/` package contains:&#10;&#10;```java&#10;// Abstract Factory Interface&#10;public interface UIFactory {&#10;    Button createButton(String label, String color, String type);&#10;    Textfield createTextField(String label, String color, String type);&#10;    Checkbox createCheckBox(String label, String color, String type);&#10;    Dropdown createDropdown(String label, String color, String type);&#10;    Menu createMenu(String label, String color, String type);&#10;}&#10;```&#10;&#10;**Concrete Factories:**&#10;- `AndroidUIFactory` - Creates Android-specific components&#10;- `IOSUIFactory` - Creates iOS-specific components  &#10;- `WindowsUIFactory` - Creates Windows-specific components&#10;&#10;##  How It Works&#10;&#10;### The Magic of Abstract Factory&#10;&#10;```java&#10;// Client code doesn't know which platform it's creating for&#10;public class Application {&#10;    private UIFactory factory;&#10;    &#10;    public Application(UIFactory factory) {&#10;        this.factory = factory;&#10;    }&#10;    &#10;    public void createUI() {&#10;        Button submitBtn = factory.createButton(&quot;Submit&quot;, &quot;blue&quot;, &quot;primary&quot;);&#10;        Textfield nameField = factory.createTextField(&quot;Name&quot;, &quot;gray&quot;, &quot;standard&quot;);&#10;        &#10;        // All components are guaranteed to be from the same platform family&#10;        submitBtn.render();&#10;        nameField.render();&#10;    }&#10;}&#10;&#10;// Usage:&#10;UIFactory androidFactory = new AndroidUIFactory();&#10;Application app = new Application(androidFactory);&#10;app.createUI();&#10;&#10;// Output: &#10;// Rendering Android Button with label: Submit, color: blue, type: primary&#10;// Rendering Android Textfield with label: Name, color: gray, type: standard&#10;```&#10;&#10;### Key Benefits Demonstrated&#10;&#10;1. **Platform Consistency**: All UI components created by a single factory belong to the same platform family&#10;2. **Easy Platform Switching**: Change one line of code to switch entire UI to different platform&#10;3. **Extensibility**: Adding new platforms requires minimal changes to existing code&#10;4. **Decoupling**: Client code is independent of concrete component implementations&#10;&#10;##  Educational Deep Dive&#10;&#10;### Factory Design Pattern Family&#10;&#10;The Factory Pattern is actually an umbrella term covering multiple related patterns:&#10;&#10;#### 1. Abstract Factory Pattern (Implemented in this project)&#10;- **Purpose**: Create families of related objects&#10;- **When to use**: Multiple product families, platform-specific implementations&#10;- **Example**: This project's UI component factories&#10;&#10;#### 2. Factory Method Pattern (Practical Factory)&#10;- **Purpose**: Create single objects with subclass-defined instantiation&#10;- **When to use**: When a class can't anticipate which objects it needs to create&#10;- **Example**: A `LogisticsApp` with `createTransport()` method - `RoadLogistics` creates `Truck`, `SeaLogistics` creates `Ship`&#10;&#10;#### 3. Simple Factory (Not a GoF pattern, but commonly used)&#10;- **Purpose**: Encapsulate object creation in a single method&#10;- **When to use**: Simple object creation scenarios&#10;- **Example**: `ComponentFactory.createComponent(type)` returns different components based on type&#10;&#10;### Real-World Applications&#10;&#10;Factory patterns are everywhere in software development:&#10;&#10;- **GUI Frameworks**: Creating platform-specific UI elements&#10;- **Database Drivers**: Different implementations for MySQL, PostgreSQL, etc.&#10;- **Game Development**: Creating different types of enemies, weapons, or levels&#10;- **Web Frameworks**: Creating different types of HTTP responses or middleware&#10;&#10;## ️ Project Structure&#10;&#10;```&#10;factory/&#10;├── abstractfactory/          # Abstract Factory implementations&#10;│   ├── UIFactory.java       # Abstract factory interface&#10;│   ├── AndroidUIFactory.java&#10;│   ├── IOSUIFactory.java&#10;│   └── WindowsUIFactory.java&#10;├── components/              # UI component families&#10;│   ├── button/             # Button component family&#10;│   ├── textfield/          # Textfield component family&#10;│   ├── checkbox/           # Checkbox component family&#10;│   ├── dropdown/           # Dropdown component family&#10;│   └── menu/               # Menu component family&#10;├── Client.java             # Demonstration client&#10;├── Flutter.java            # Platform selection utility&#10;└── Platform.java           # Platform enumeration&#10;```&#10;&#10;##  Running the Demo&#10;&#10;The project includes demonstration classes that show the factory pattern in action:&#10;&#10;1. **Client.java**: Demonstrates creating UI components using different factories&#10;2. **Flutter.java**: Simulates a cross-platform framework that uses factories&#10;3. **Platform.java**: Defines available platforms (Android, iOS, Windows)&#10;&#10;##  Learning Outcomes&#10;&#10;After exploring this project, you should understand:&#10;&#10;- How Abstract Factory pattern manages families of related objects&#10;- The benefits of decoupling object creation from object usage&#10;- How factory patterns enable easy extensibility and maintenance&#10;- Real-world applications of factory patterns in software development&#10;- The difference between Abstract Factory and Factory Method patterns&#10;&#10;##  What's Next?&#10;&#10;Consider exploring:&#10;- Adding new platforms (e.g., Web, macOS)&#10;- Implementing actual UI rendering logic&#10;- Combining with other design patterns (Builder, Strategy)&#10;- Creating configuration-driven factory selection&#10;- Adding validation and error handling to factory methods&#10;&#10;---&#10;&#10;*This project is part of a hands-on learning journey through Design Patterns. Each implementation focuses on understanding core concepts rather than production-ready code.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/abstractfactory/AndroidUIFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/abstractfactory/AndroidUIFactory.java" />
              <option name="originalContent" value="package factory.abstractfactory;&#10;&#10;public class AndroidUIFactory implements UIFactory {&#10;}&#10;" />
              <option name="updatedContent" value="package factory.abstractfactory;&#10;&#10;import factory.components.button.AndroidButton;&#10;import factory.components.button.Button;&#10;import factory.components.checkbox.AndroidCheckbox;&#10;import factory.components.checkbox.Checkbox;&#10;import factory.components.dropdown.AndroidDropdown;&#10;import factory.components.dropdown.Dropdown;&#10;import factory.components.menu.AndroidMenu;&#10;import factory.components.menu.Menu;&#10;import factory.components.textfield.AndroidTextfield;&#10;import factory.components.textfield.Textfield;&#10;&#10;public class AndroidUIFactory implements UIFactory {&#10;    @Override&#10;    public Button createButton(String label, String color, String type) {&#10;        return new AndroidButton(label, color, type);&#10;    }&#10;&#10;    @Override&#10;    public Textfield createTextField(String label, String color, String type) {&#10;        return new AndroidTextfield(label, color, type);&#10;    }&#10;&#10;    @Override&#10;    public Checkbox createCheckBox(String label, String color, String type) {&#10;        return new AndroidCheckbox(label, color, type);&#10;    }&#10;&#10;    @Override&#10;    public Dropdown createDropdown(String label, String color, String type) {&#10;        return new AndroidDropdown(label, color, type);&#10;    }&#10;&#10;    @Override&#10;    public Menu createMenu(String label, String color, String type) {&#10;        return new AndroidMenu(label, color, type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/abstractfactory/IOSUIFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/abstractfactory/IOSUIFactory.java" />
              <option name="originalContent" value="package factory.abstractfactory;&#10;&#10;public class IOSUIFactory implements UIFactory {&#10;//    @Override&#10;//    public Button createButton() {&#10;//        return new IOSButton();&#10;//    }&#10;//&#10;//    @Override&#10;//    public TextField createTextField() {&#10;//        return new IOSTextField();&#10;//    }&#10;//&#10;//    @Override&#10;//    public CheckBox createCheckBox() {&#10;//        return new IOSCheckBox();&#10;//    }&#10;}&#10;" />
              <option name="updatedContent" value="package factory.abstractfactory;&#13;&#10;&#13;&#10;import factory.components.button.Button;&#13;&#10;import factory.components.button.IOSButton;&#13;&#10;import factory.components.checkbox.Checkbox;&#13;&#10;import factory.components.checkbox.IOSCheckbox;&#13;&#10;import factory.components.dropdown.Dropdown;&#13;&#10;import factory.components.dropdown.IOSDropdown;&#13;&#10;import factory.components.menu.IOSMenu;&#13;&#10;import factory.components.menu.Menu;&#13;&#10;import factory.components.textfield.IOSTextfield;&#13;&#10;import factory.components.textfield.Textfield;&#13;&#10;&#13;&#10;public class IOSUIFactory implements UIFactory {&#13;&#10;    @Override&#13;&#10;    public Button createButton(String label, String color, String type) {&#13;&#10;        return new IOSButton(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Textfield createTextField(String label, String color, String type) {&#13;&#10;        return new IOSTextfield(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Checkbox createCheckBox(String label, String color, String type) {&#13;&#10;        return new IOSCheckbox(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Dropdown createDropdown(String label, String color, String type) {&#13;&#10;        return new IOSDropdown(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Menu createMenu(String label, String color, String type) {&#13;&#10;        return new IOSMenu(label, color, type);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/abstractfactory/UIFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/abstractfactory/UIFactory.java" />
              <option name="originalContent" value="package factory.abstractfactory;&#10;import factory.components.button.Button;&#10;import factory.components.checkbox.Checkbox;&#10;import factory.components.dropdown.Dropdown;&#10;import factory.components.menu.Menu;&#10;import factory.components.textfield.Textfield;&#10;&#10;public interface UIFactory {&#10;    Button createButton();&#10;    Textfield createTextField();&#10;    Checkbox createCheckBox();&#10;    Dropdown createDropdown();&#10;    Menu createMenu();&#10;}&#10;" />
              <option name="updatedContent" value="package factory.abstractfactory;&#10;import factory.components.button.Button;&#10;import factory.components.checkbox.Checkbox;&#10;import factory.components.dropdown.Dropdown;&#10;import factory.components.menu.Menu;&#10;import factory.components.textfield.Textfield;&#10;&#10;public interface UIFactory {&#10;    Button createButton(String label, String color, String type);&#10;    Textfield createTextField(String label, String color, String type);&#10;    Checkbox createCheckBox(String label, String color, String type);&#10;    Dropdown createDropdown(String label, String color, String type);&#10;    Menu createMenu(String label, String color, String type);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/abstractfactory/WindowsUIFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/abstractfactory/WindowsUIFactory.java" />
              <option name="originalContent" value="package factory.abstractfactory;&#10;&#10;public class WindowsUIFactory implements UIFactory {&#10;//    @Override&#10;//    public Button createButton() {&#10;//        return new WindowsButton();&#10;//    }&#10;//&#10;//    @Override&#10;//    public TextField createTextField() {&#10;//        return new WindowsTextField();&#10;//    }&#10;//&#10;//    @Override&#10;//    public CheckBox createCheckBox() {&#10;//        return new WindowsCheckBox();&#10;//    }&#10;}&#10;" />
              <option name="updatedContent" value="package factory.abstractfactory;&#13;&#10;&#13;&#10;import factory.components.button.Button;&#13;&#10;import factory.components.button.WindowsButton;&#13;&#10;import factory.components.checkbox.Checkbox;&#13;&#10;import factory.components.checkbox.WindowsCheckbox;&#13;&#10;import factory.components.dropdown.Dropdown;&#13;&#10;import factory.components.dropdown.WindowsDropdown;&#13;&#10;import factory.components.menu.Menu;&#13;&#10;import factory.components.menu.WindowsMenu;&#13;&#10;import factory.components.textfield.Textfield;&#13;&#10;import factory.components.textfield.WindowsTextfield;&#13;&#10;&#13;&#10;public class WindowsUIFactory implements UIFactory {&#13;&#10;    @Override&#13;&#10;    public Button createButton(String label, String color, String type) {&#13;&#10;        return new WindowsButton(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Textfield createTextField(String label, String color, String type) {&#13;&#10;        return new WindowsTextfield(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Checkbox createCheckBox(String label, String color, String type) {&#13;&#10;        return new WindowsCheckbox(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Dropdown createDropdown(String label, String color, String type) {&#13;&#10;        return new WindowsDropdown(label, color, type);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public Menu createMenu(String label, String color, String type) {&#13;&#10;        return new WindowsMenu(label, color, type);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/checkbox/AndroidCheckbox.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/checkbox/AndroidCheckbox.java" />
              <option name="updatedContent" value="package factory.components.checkbox;&#10;&#10;public class AndroidCheckbox implements Checkbox {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private boolean checked;&#10;&#10;    public AndroidCheckbox(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.checked = false;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Android Checkbox with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type + &quot;, checked: &quot; + checked);&#10;    }&#10;&#10;    @Override&#10;    public void onCheck() {&#10;        this.checked = true;&#10;        System.out.println(&quot;Android Checkbox checked!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onUncheck() {&#10;        this.checked = false;&#10;        System.out.println(&quot;Android Checkbox unchecked!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public boolean isChecked() {&#10;        return checked;&#10;    }&#10;&#10;    @Override&#10;    public void setChecked(boolean checked) {&#10;        this.checked = checked;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/checkbox/Checkbox.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/checkbox/Checkbox.java" />
              <option name="updatedContent" value="package factory.components.checkbox;&#10;&#10;public interface Checkbox {&#10;    void render();&#10;    void onCheck();&#10;    void onUncheck();&#10;    String getLabel();&#10;    void setLabel(String label);&#10;    String getColor();&#10;    void setColor(String color);&#10;    String getType();&#10;    boolean isChecked();&#10;    void setChecked(boolean checked);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/checkbox/IOSCheckbox.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/checkbox/IOSCheckbox.java" />
              <option name="updatedContent" value="package factory.components.checkbox;&#10;&#10;public class IOSCheckbox implements Checkbox {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private boolean checked;&#10;&#10;    public IOSCheckbox(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.checked = false;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering iOS Checkbox with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type + &quot;, checked: &quot; + checked);&#10;    }&#10;&#10;    @Override&#10;    public void onCheck() {&#10;        this.checked = true;&#10;        System.out.println(&quot;iOS Checkbox checked!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onUncheck() {&#10;        this.checked = false;&#10;        System.out.println(&quot;iOS Checkbox unchecked!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public boolean isChecked() {&#10;        return checked;&#10;    }&#10;&#10;    @Override&#10;    public void setChecked(boolean checked) {&#10;        this.checked = checked;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/checkbox/WindowsCheckbox.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/checkbox/WindowsCheckbox.java" />
              <option name="updatedContent" value="package factory.components.checkbox;&#10;&#10;public class WindowsCheckbox implements Checkbox {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private boolean checked;&#10;&#10;    public WindowsCheckbox(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.checked = false;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Windows Checkbox with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type + &quot;, checked: &quot; + checked);&#10;    }&#10;&#10;    @Override&#10;    public void onCheck() {&#10;        this.checked = true;&#10;        System.out.println(&quot;Windows Checkbox checked!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onUncheck() {&#10;        this.checked = false;&#10;        System.out.println(&quot;Windows Checkbox unchecked!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public boolean isChecked() {&#10;        return checked;&#10;    }&#10;&#10;    @Override&#10;    public void setChecked(boolean checked) {&#10;        this.checked = checked;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/dropdown/AndroidDropdown.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/dropdown/AndroidDropdown.java" />
              <option name="updatedContent" value="package factory.components.dropdown;&#10;&#10;import java.util.List;&#10;&#10;public class AndroidDropdown implements Dropdown {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private List&lt;String&gt; options;&#10;    private String selectedValue;&#10;&#10;    public AndroidDropdown(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Android Dropdown with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onSelect(String value) {&#10;        this.selectedValue = value;&#10;        System.out.println(&quot;Android Dropdown selected: &quot; + value);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getOptions() {&#10;        return options;&#10;    }&#10;&#10;    @Override&#10;    public void setOptions(List&lt;String&gt; options) {&#10;        this.options = options;&#10;    }&#10;&#10;    @Override&#10;    public String getSelectedValue() {&#10;        return selectedValue;&#10;    }&#10;&#10;    @Override&#10;    public void setSelectedValue(String value) {&#10;        this.selectedValue = value;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/dropdown/Dropdown.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/dropdown/Dropdown.java" />
              <option name="updatedContent" value="package factory.components.dropdown;&#10;&#10;import java.util.List;&#10;&#10;public interface Dropdown {&#10;    void render();&#10;    void onSelect(String value);&#10;    String getLabel();&#10;    void setLabel(String label);&#10;    String getColor();&#10;    void setColor(String color);&#10;    String getType();&#10;    List&lt;String&gt; getOptions();&#10;    void setOptions(List&lt;String&gt; options);&#10;    String getSelectedValue();&#10;    void setSelectedValue(String value);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/dropdown/IOSDropdown.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/dropdown/IOSDropdown.java" />
              <option name="updatedContent" value="package factory.components.dropdown;&#10;&#10;import java.util.List;&#10;&#10;public class IOSDropdown implements Dropdown {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private List&lt;String&gt; options;&#10;    private String selectedValue;&#10;&#10;    public IOSDropdown(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering iOS Dropdown with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onSelect(String value) {&#10;        this.selectedValue = value;&#10;        System.out.println(&quot;iOS Dropdown selected: &quot; + value);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getOptions() {&#10;        return options;&#10;    }&#10;&#10;    @Override&#10;    public void setOptions(List&lt;String&gt; options) {&#10;        this.options = options;&#10;    }&#10;&#10;    @Override&#10;    public String getSelectedValue() {&#10;        return selectedValue;&#10;    }&#10;&#10;    @Override&#10;    public void setSelectedValue(String value) {&#10;        this.selectedValue = value;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/dropdown/WindowsDropdown.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/dropdown/WindowsDropdown.java" />
              <option name="updatedContent" value="package factory.components.dropdown;&#10;&#10;import java.util.List;&#10;&#10;public class WindowsDropdown implements Dropdown {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private List&lt;String&gt; options;&#10;    private String selectedValue;&#10;&#10;    public WindowsDropdown(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Windows Dropdown with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onSelect(String value) {&#10;        this.selectedValue = value;&#10;        System.out.println(&quot;Windows Dropdown selected: &quot; + value);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getOptions() {&#10;        return options;&#10;    }&#10;&#10;    @Override&#10;    public void setOptions(List&lt;String&gt; options) {&#10;        this.options = options;&#10;    }&#10;&#10;    @Override&#10;    public String getSelectedValue() {&#10;        return selectedValue;&#10;    }&#10;&#10;    @Override&#10;    public void setSelectedValue(String value) {&#10;        this.selectedValue = value;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/menu/AndroidMenu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/menu/AndroidMenu.java" />
              <option name="updatedContent" value="package factory.components.menu;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class AndroidMenu implements Menu {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private List&lt;String&gt; menuItems;&#10;&#10;    public AndroidMenu(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.menuItems = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Android Menu with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onItemSelect(String item) {&#10;        System.out.println(&quot;Android Menu item selected: &quot; + item);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getMenuItems() {&#10;        return menuItems;&#10;    }&#10;&#10;    @Override&#10;    public void setMenuItems(List&lt;String&gt; items) {&#10;        this.menuItems = items;&#10;    }&#10;&#10;    @Override&#10;    public void addMenuItem(String item) {&#10;        this.menuItems.add(item);&#10;    }&#10;&#10;    @Override&#10;    public void removeMenuItem(String item) {&#10;        this.menuItems.remove(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/menu/IOSMenu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/menu/IOSMenu.java" />
              <option name="updatedContent" value="package factory.components.menu;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class IOSMenu implements Menu {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private List&lt;String&gt; menuItems;&#10;&#10;    public IOSMenu(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.menuItems = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering iOS Menu with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onItemSelect(String item) {&#10;        System.out.println(&quot;iOS Menu item selected: &quot; + item);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getMenuItems() {&#10;        return menuItems;&#10;    }&#10;&#10;    @Override&#10;    public void setMenuItems(List&lt;String&gt; items) {&#10;        this.menuItems = items;&#10;    }&#10;&#10;    @Override&#10;    public void addMenuItem(String item) {&#10;        this.menuItems.add(item);&#10;    }&#10;&#10;    @Override&#10;    public void removeMenuItem(String item) {&#10;        this.menuItems.remove(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/menu/Menu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/menu/Menu.java" />
              <option name="updatedContent" value="package factory.components.menu;&#10;&#10;import java.util.List;&#10;&#10;public interface Menu {&#10;    void render();&#10;    void onItemSelect(String item);&#10;    String getLabel();&#10;    void setLabel(String label);&#10;    String getColor();&#10;    void setColor(String color);&#10;    String getType();&#10;    List&lt;String&gt; getMenuItems();&#10;    void setMenuItems(List&lt;String&gt; items);&#10;    void addMenuItem(String item);&#10;    void removeMenuItem(String item);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/menu/WindowsMenu.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/menu/WindowsMenu.java" />
              <option name="updatedContent" value="package factory.components.menu;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class WindowsMenu implements Menu {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private List&lt;String&gt; menuItems;&#10;&#10;    public WindowsMenu(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.menuItems = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Windows Menu with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onItemSelect(String item) {&#10;        System.out.println(&quot;Windows Menu item selected: &quot; + item);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; getMenuItems() {&#10;        return menuItems;&#10;    }&#10;&#10;    @Override&#10;    public void setMenuItems(List&lt;String&gt; items) {&#10;        this.menuItems = items;&#10;    }&#10;&#10;    @Override&#10;    public void addMenuItem(String item) {&#10;        this.menuItems.add(item);&#10;    }&#10;&#10;    @Override&#10;    public void removeMenuItem(String item) {&#10;        this.menuItems.remove(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/textfield/AndroidTextfield.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/textfield/AndroidTextfield.java" />
              <option name="updatedContent" value="package factory.components.textfield;&#10;&#10;public class AndroidTextfield implements Textfield {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private String text;&#10;    private String placeholder;&#10;    private boolean readOnly;&#10;&#10;    public AndroidTextfield(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.text = &quot;&quot;;&#10;        this.placeholder = &quot;&quot;;&#10;        this.readOnly = false;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Android Textfield with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onTextChange(String text) {&#10;        this.text = text;&#10;        System.out.println(&quot;Android Textfield text changed: &quot; + text);&#10;    }&#10;&#10;    @Override&#10;    public void onFocus() {&#10;        System.out.println(&quot;Android Textfield focused!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onBlur() {&#10;        System.out.println(&quot;Android Textfield blurred!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    @Override&#10;    public void setText(String text) {&#10;        this.text = text;&#10;    }&#10;&#10;    @Override&#10;    public String getPlaceholder() {&#10;        return placeholder;&#10;    }&#10;&#10;    @Override&#10;    public void setPlaceholder(String placeholder) {&#10;        this.placeholder = placeholder;&#10;    }&#10;&#10;    @Override&#10;    public boolean isReadOnly() {&#10;        return readOnly;&#10;    }&#10;&#10;    @Override&#10;    public void setReadOnly(boolean readOnly) {&#10;        this.readOnly = readOnly;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/textfield/IOSTextfield.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/textfield/IOSTextfield.java" />
              <option name="updatedContent" value="package factory.components.textfield;&#10;&#10;public class IOSTextfield implements Textfield {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private String text;&#10;    private String placeholder;&#10;    private boolean readOnly;&#10;&#10;    public IOSTextfield(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.text = &quot;&quot;;&#10;        this.placeholder = &quot;&quot;;&#10;        this.readOnly = false;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering iOS Textfield with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onTextChange(String text) {&#10;        this.text = text;&#10;        System.out.println(&quot;iOS Textfield text changed: &quot; + text);&#10;    }&#10;&#10;    @Override&#10;    public void onFocus() {&#10;        System.out.println(&quot;iOS Textfield focused!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onBlur() {&#10;        System.out.println(&quot;iOS Textfield blurred!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    @Override&#10;    public void setText(String text) {&#10;        this.text = text;&#10;    }&#10;&#10;    @Override&#10;    public String getPlaceholder() {&#10;        return placeholder;&#10;    }&#10;&#10;    @Override&#10;    public void setPlaceholder(String placeholder) {&#10;        this.placeholder = placeholder;&#10;    }&#10;&#10;    @Override&#10;    public boolean isReadOnly() {&#10;        return readOnly;&#10;    }&#10;&#10;    @Override&#10;    public void setReadOnly(boolean readOnly) {&#10;        this.readOnly = readOnly;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/textfield/Textfield.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/textfield/Textfield.java" />
              <option name="updatedContent" value="package factory.components.textfield;&#10;&#10;public interface Textfield {&#10;    void render();&#10;    void onTextChange(String text);&#10;    void onFocus();&#10;    void onBlur();&#10;    String getLabel();&#10;    void setLabel(String label);&#10;    String getColor();&#10;    void setColor(String color);&#10;    String getType();&#10;    String getText();&#10;    void setText(String text);&#10;    String getPlaceholder();&#10;    void setPlaceholder(String placeholder);&#10;    boolean isReadOnly();&#10;    void setReadOnly(boolean readOnly);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/factory/components/textfield/WindowsTextfield.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/factory/components/textfield/WindowsTextfield.java" />
              <option name="updatedContent" value="package factory.components.textfield;&#10;&#10;public class WindowsTextfield implements Textfield {&#10;    private String label;&#10;    private String color;&#10;    private String type;&#10;    private String text;&#10;    private String placeholder;&#10;    private boolean readOnly;&#10;&#10;    public WindowsTextfield(String label, String color, String type) {&#10;        this.label = label;&#10;        this.color = color;&#10;        this.type = type;&#10;        this.text = &quot;&quot;;&#10;        this.placeholder = &quot;&quot;;&#10;        this.readOnly = false;&#10;    }&#10;&#10;    @Override&#10;    public void render() {&#10;        System.out.println(&quot;Rendering Windows Textfield with label: &quot; + label + &quot;, color: &quot; + color + &quot;, type: &quot; + type);&#10;    }&#10;&#10;    @Override&#10;    public void onTextChange(String text) {&#10;        this.text = text;&#10;        System.out.println(&quot;Windows Textfield text changed: &quot; + text);&#10;    }&#10;&#10;    @Override&#10;    public void onFocus() {&#10;        System.out.println(&quot;Windows Textfield focused!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void onBlur() {&#10;        System.out.println(&quot;Windows Textfield blurred!&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String getLabel() {&#10;        return label;&#10;    }&#10;&#10;    @Override&#10;    public void setLabel(String label) {&#10;        this.label = label;&#10;    }&#10;&#10;    @Override&#10;    public String getColor() {&#10;        return color;&#10;    }&#10;&#10;    @Override&#10;    public void setColor(String color) {&#10;        this.color = color;&#10;    }&#10;&#10;    @Override&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    @Override&#10;    public String getText() {&#10;        return text;&#10;    }&#10;&#10;    @Override&#10;    public void setText(String text) {&#10;        this.text = text;&#10;    }&#10;&#10;    @Override&#10;    public String getPlaceholder() {&#10;        return placeholder;&#10;    }&#10;&#10;    @Override&#10;    public void setPlaceholder(String placeholder) {&#10;        this.placeholder = placeholder;&#10;    }&#10;&#10;    @Override&#10;    public boolean isReadOnly() {&#10;        return readOnly;&#10;    }&#10;&#10;    @Override&#10;    public void setReadOnly(boolean readOnly) {&#10;        this.readOnly = readOnly;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>